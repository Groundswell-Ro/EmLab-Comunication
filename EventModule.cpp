//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `EventModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <EventModule.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_EventModule_EventInterface_ids[2] =
{
    "::EventModule::EventInterface",
    "::Ice::Object"
};
const ::std::string iceC_EventModule_EventInterface_ops[] =
{
    "addServiceToEvent",
    "deleteRecord",
    "getClientsByName",
    "getClientsByPhone",
    "getEventData",
    "getEventsData",
    "getTenEvents",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "modifyClient",
    "modifyEventDoubleField",
    "modifyEventIntField",
    "modifyEventStringField",
    "modifyServiceDoubleField",
    "modifyServiceIntField",
    "modifyServiceStringField",
    "registerClient",
    "registerEvent"
};
const ::std::string iceC_EventModule_EventInterface_getEventsData_name = "getEventsData";
const ::std::string iceC_EventModule_EventInterface_getClientsByName_name = "getClientsByName";
const ::std::string iceC_EventModule_EventInterface_getClientsByPhone_name = "getClientsByPhone";
const ::std::string iceC_EventModule_EventInterface_getEventData_name = "getEventData";
const ::std::string iceC_EventModule_EventInterface_getTenEvents_name = "getTenEvents";
const ::std::string iceC_EventModule_EventInterface_registerEvent_name = "registerEvent";
const ::std::string iceC_EventModule_EventInterface_modifyEventIntField_name = "modifyEventIntField";
const ::std::string iceC_EventModule_EventInterface_modifyEventStringField_name = "modifyEventStringField";
const ::std::string iceC_EventModule_EventInterface_modifyEventDoubleField_name = "modifyEventDoubleField";
const ::std::string iceC_EventModule_EventInterface_addServiceToEvent_name = "addServiceToEvent";
const ::std::string iceC_EventModule_EventInterface_modifyServiceIntField_name = "modifyServiceIntField";
const ::std::string iceC_EventModule_EventInterface_modifyServiceStringField_name = "modifyServiceStringField";
const ::std::string iceC_EventModule_EventInterface_modifyServiceDoubleField_name = "modifyServiceDoubleField";
const ::std::string iceC_EventModule_EventInterface_registerClient_name = "registerClient";
const ::std::string iceC_EventModule_EventInterface_modifyClient_name = "modifyClient";
const ::std::string iceC_EventModule_EventInterface_deleteRecord_name = "deleteRecord";

}

bool
EventModule::EventInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_EventModule_EventInterface_ids, iceC_EventModule_EventInterface_ids + 2, s);
}

::std::vector<::std::string>
EventModule::EventInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_EventModule_EventInterface_ids[0], &iceC_EventModule_EventInterface_ids[2]);
}

::std::string
EventModule::EventInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
EventModule::EventInterface::ice_staticId()
{
    static const ::std::string typeId = "::EventModule::EventInterface";
    return typeId;
}

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getEventsData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    istr->readAll(iceP_userToken);
    inS.endReadParams();
    SeqEventData ret = this->getEventsData(::std::move(iceP_userToken), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getClientsByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_partialName;
    istr->readAll(iceP_userToken, iceP_partialName);
    inS.endReadParams();
    SeqClientInfo ret = this->getClientsByName(::std::move(iceP_userToken), ::std::move(iceP_partialName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getClientsByPhone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_partialPhone;
    istr->readAll(iceP_userToken, iceP_partialPhone);
    inS.endReadParams();
    SeqClientInfo ret = this->getClientsByPhone(::std::move(iceP_userToken), ::std::move(iceP_partialPhone), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getEventData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_eventId;
    istr->readAll(iceP_userToken, iceP_eventId);
    inS.endReadParams();
    EventData ret = this->getEventData(::std::move(iceP_userToken), iceP_eventId, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getTenEvents(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_fromDate;
    int iceP_offset;
    istr->readAll(iceP_userToken, iceP_fromDate, iceP_offset);
    inS.endReadParams();
    SeqEventData ret = this->getTenEvents(::std::move(iceP_userToken), ::std::move(iceP_fromDate), iceP_offset, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_registerEvent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    EventData iceP_eventData;
    istr->readAll(iceP_userToken, iceP_eventData);
    inS.endReadParams();
    EventData ret = this->registerEvent(::std::move(iceP_userToken), ::std::move(iceP_eventData), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventIntField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_eventId;
    EventField iceP_field;
    int iceP_newValue;
    istr->readAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyEventIntField(::std::move(iceP_userToken), iceP_eventId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventStringField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_eventId;
    EventField iceP_field;
    ::std::string iceP_newValue;
    istr->readAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyEventStringField(::std::move(iceP_userToken), iceP_eventId, iceP_field, ::std::move(iceP_newValue), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventDoubleField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_eventId;
    EventField iceP_field;
    double iceP_newValue;
    istr->readAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyEventDoubleField(::std::move(iceP_userToken), iceP_eventId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_addServiceToEvent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ServiceInfo iceP_serviceInfo;
    istr->readAll(iceP_userToken, iceP_serviceInfo);
    inS.endReadParams();
    this->addServiceToEvent(::std::move(iceP_userToken), ::std::move(iceP_serviceInfo), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceIntField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_serviceId;
    ServiceField iceP_field;
    int iceP_newValue;
    istr->readAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyServiceIntField(::std::move(iceP_userToken), iceP_serviceId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceStringField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_serviceId;
    ServiceField iceP_field;
    ::std::string iceP_newValue;
    istr->readAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyServiceStringField(::std::move(iceP_userToken), iceP_serviceId, iceP_field, ::std::move(iceP_newValue), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceDoubleField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    int iceP_serviceId;
    ServiceField iceP_field;
    double iceP_newValue;
    istr->readAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
    inS.endReadParams();
    this->modifyServiceDoubleField(::std::move(iceP_userToken), iceP_serviceId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_registerClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ClientInfo iceP_clientInfo;
    istr->readAll(iceP_userToken, iceP_clientInfo);
    inS.endReadParams();
    int ret = this->registerClient(::std::move(iceP_userToken), ::std::move(iceP_clientInfo), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ClientInfo iceP_clientInfo;
    istr->readAll(iceP_userToken, iceP_clientInfo);
    inS.endReadParams();
    this->modifyClient(::std::move(iceP_userToken), ::std::move(iceP_clientInfo), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_deleteRecord(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    Table iceP_table;
    int iceP_id;
    istr->readAll(iceP_userToken, iceP_table, iceP_id);
    inS.endReadParams();
    this->deleteRecord(::std::move(iceP_userToken), iceP_table, iceP_id, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_EventModule_EventInterface_ops, iceC_EventModule_EventInterface_ops + 20, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_EventModule_EventInterface_ops)
    {
        case 0:
        {
            return _iceD_addServiceToEvent(in, current);
        }
        case 1:
        {
            return _iceD_deleteRecord(in, current);
        }
        case 2:
        {
            return _iceD_getClientsByName(in, current);
        }
        case 3:
        {
            return _iceD_getClientsByPhone(in, current);
        }
        case 4:
        {
            return _iceD_getEventData(in, current);
        }
        case 5:
        {
            return _iceD_getEventsData(in, current);
        }
        case 6:
        {
            return _iceD_getTenEvents(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_modifyClient(in, current);
        }
        case 12:
        {
            return _iceD_modifyEventDoubleField(in, current);
        }
        case 13:
        {
            return _iceD_modifyEventIntField(in, current);
        }
        case 14:
        {
            return _iceD_modifyEventStringField(in, current);
        }
        case 15:
        {
            return _iceD_modifyServiceDoubleField(in, current);
        }
        case 16:
        {
            return _iceD_modifyServiceIntField(in, current);
        }
        case 17:
        {
            return _iceD_modifyServiceStringField(in, current);
        }
        case 18:
        {
            return _iceD_registerClient(in, current);
        }
        case 19:
        {
            return _iceD_registerEvent(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_getEventsData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::SeqEventData>>& outAsync, const ::std::string& iceP_userToken, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getEventsData_name);
    outAsync->invoke(iceC_EventModule_EventInterface_getEventsData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_getClientsByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::SeqClientInfo>>& outAsync, const ::std::string& iceP_userToken, const ::std::string& iceP_partialName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getClientsByName_name);
    outAsync->invoke(iceC_EventModule_EventInterface_getClientsByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_partialName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_getClientsByPhone(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::SeqClientInfo>>& outAsync, const ::std::string& iceP_userToken, const ::std::string& iceP_partialPhone, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getClientsByPhone_name);
    outAsync->invoke(iceC_EventModule_EventInterface_getClientsByPhone_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_partialPhone);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_getEventData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::EventData>>& outAsync, const ::std::string& iceP_userToken, int iceP_eventId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getEventData_name);
    outAsync->invoke(iceC_EventModule_EventInterface_getEventData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_eventId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_getTenEvents(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::SeqEventData>>& outAsync, const ::std::string& iceP_userToken, const ::std::string& iceP_fromDate, int iceP_offset, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getTenEvents_name);
    outAsync->invoke(iceC_EventModule_EventInterface_getTenEvents_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_fromDate, iceP_offset);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_registerEvent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::EventModule::EventData>>& outAsync, const ::std::string& iceP_userToken, const EventData& iceP_eventData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_registerEvent_name);
    outAsync->invoke(iceC_EventModule_EventInterface_registerEvent_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_eventData);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyEventIntField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_eventId, EventField iceP_field, int iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyEventIntField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyEventStringField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_eventId, EventField iceP_field, const ::std::string& iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyEventStringField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyEventDoubleField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_eventId, EventField iceP_field, double iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyEventDoubleField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_addServiceToEvent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, const ServiceInfo& iceP_serviceInfo, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_addServiceToEvent_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_serviceInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyServiceIntField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_serviceId, ServiceField iceP_field, int iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyServiceIntField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyServiceStringField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_serviceId, ServiceField iceP_field, const ::std::string& iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyServiceStringField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyServiceDoubleField(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, int iceP_serviceId, ServiceField iceP_field, double iceP_newValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyServiceDoubleField_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_registerClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_userToken, const ClientInfo& iceP_clientInfo, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_registerClient_name);
    outAsync->invoke(iceC_EventModule_EventInterface_registerClient_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_clientInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_modifyClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, const ClientInfo& iceP_clientInfo, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_modifyClient_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_clientInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
EventModule::EventInterfacePrx::_iceI_deleteRecord(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_userToken, Table iceP_table, int iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_EventModule_EventInterface_deleteRecord_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userToken, iceP_table, iceP_id);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
EventModule::EventInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<EventInterfacePrx>();
}
/// \endcond

const ::std::string&
EventModule::EventInterfacePrx::ice_staticId()
{
    return EventInterface::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_EventModule_EventInterface_getEventsData_name = "getEventsData";

const ::std::string iceC_EventModule_EventInterface_getClientsByName_name = "getClientsByName";

const ::std::string iceC_EventModule_EventInterface_getClientsByPhone_name = "getClientsByPhone";

const ::std::string iceC_EventModule_EventInterface_getEventData_name = "getEventData";

const ::std::string iceC_EventModule_EventInterface_getTenEvents_name = "getTenEvents";

const ::std::string iceC_EventModule_EventInterface_registerEvent_name = "registerEvent";

const ::std::string iceC_EventModule_EventInterface_modifyEventIntField_name = "modifyEventIntField";

const ::std::string iceC_EventModule_EventInterface_modifyEventStringField_name = "modifyEventStringField";

const ::std::string iceC_EventModule_EventInterface_modifyEventDoubleField_name = "modifyEventDoubleField";

const ::std::string iceC_EventModule_EventInterface_addServiceToEvent_name = "addServiceToEvent";

const ::std::string iceC_EventModule_EventInterface_modifyServiceIntField_name = "modifyServiceIntField";

const ::std::string iceC_EventModule_EventInterface_modifyServiceStringField_name = "modifyServiceStringField";

const ::std::string iceC_EventModule_EventInterface_modifyServiceDoubleField_name = "modifyServiceDoubleField";

const ::std::string iceC_EventModule_EventInterface_registerClient_name = "registerClient";

const ::std::string iceC_EventModule_EventInterface_modifyClient_name = "modifyClient";

const ::std::string iceC_EventModule_EventInterface_deleteRecord_name = "deleteRecord";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::EventModule::upCast(EventInterface* p) { return p; }

void
::IceProxy::EventModule::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< EventInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new EventInterface;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_getEventsData(const ::std::string& iceP_userToken, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getEventsData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_getEventsData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_getEventsData_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_getEventsData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::SeqEventData
IceProxy::EventModule::EventInterface::end_getEventsData(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_getEventsData_name);
    ::EventModule::SeqEventData ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_getClientsByName(const ::std::string& iceP_userToken, const ::std::string& iceP_partialName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getClientsByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_getClientsByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_getClientsByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_partialName);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_getClientsByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::SeqClientInfo
IceProxy::EventModule::EventInterface::end_getClientsByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_getClientsByName_name);
    ::EventModule::SeqClientInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_getClientsByPhone(const ::std::string& iceP_userToken, const ::std::string& iceP_partialPhone, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getClientsByPhone_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_getClientsByPhone_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_getClientsByPhone_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_partialPhone);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_getClientsByPhone_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::SeqClientInfo
IceProxy::EventModule::EventInterface::end_getClientsByPhone(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_getClientsByPhone_name);
    ::EventModule::SeqClientInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_getEventData(const ::std::string& iceP_userToken, ::Ice::Int iceP_eventId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getEventData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_getEventData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_getEventData_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_eventId);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_getEventData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::EventData
IceProxy::EventModule::EventInterface::end_getEventData(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_getEventData_name);
    ::EventModule::EventData ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_getTenEvents(const ::std::string& iceP_userToken, const ::std::string& iceP_fromDate, ::Ice::Int iceP_offset, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_getTenEvents_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_getTenEvents_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_getTenEvents_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_fromDate);
        ostr->write(iceP_offset);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_getTenEvents_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::SeqEventData
IceProxy::EventModule::EventInterface::end_getTenEvents(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_getTenEvents_name);
    ::EventModule::SeqEventData ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_registerEvent(const ::std::string& iceP_userToken, const ::EventModule::EventData& iceP_eventData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_registerEvent_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_registerEvent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_registerEvent_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_eventData);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_registerEvent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::EventModule::EventData
IceProxy::EventModule::EventInterface::end_registerEvent(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_registerEvent_name);
    ::EventModule::EventData ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyEventIntField(const ::std::string& iceP_userToken, ::Ice::Int iceP_eventId, ::EventModule::EventField iceP_field, ::Ice::Int iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyEventIntField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyEventIntField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_eventId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyEventIntField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyEventIntField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyEventIntField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyEventStringField(const ::std::string& iceP_userToken, ::Ice::Int iceP_eventId, ::EventModule::EventField iceP_field, const ::std::string& iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyEventStringField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyEventStringField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_eventId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyEventStringField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyEventStringField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyEventStringField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyEventDoubleField(const ::std::string& iceP_userToken, ::Ice::Int iceP_eventId, ::EventModule::EventField iceP_field, ::Ice::Double iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyEventDoubleField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyEventDoubleField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_eventId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyEventDoubleField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyEventDoubleField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyEventDoubleField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_addServiceToEvent(const ::std::string& iceP_userToken, const ::EventModule::ServiceInfo& iceP_serviceInfo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_addServiceToEvent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_addServiceToEvent_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_serviceInfo);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_addServiceToEvent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_addServiceToEvent(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_addServiceToEvent_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyServiceIntField(const ::std::string& iceP_userToken, ::Ice::Int iceP_serviceId, ::EventModule::ServiceField iceP_field, ::Ice::Int iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyServiceIntField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyServiceIntField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_serviceId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyServiceIntField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyServiceIntField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyServiceIntField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyServiceStringField(const ::std::string& iceP_userToken, ::Ice::Int iceP_serviceId, ::EventModule::ServiceField iceP_field, const ::std::string& iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyServiceStringField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyServiceStringField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_serviceId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyServiceStringField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyServiceStringField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyServiceStringField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyServiceDoubleField(const ::std::string& iceP_userToken, ::Ice::Int iceP_serviceId, ::EventModule::ServiceField iceP_field, ::Ice::Double iceP_newValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyServiceDoubleField_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyServiceDoubleField_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_serviceId);
        ostr->write(iceP_field);
        ostr->write(iceP_newValue);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyServiceDoubleField_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyServiceDoubleField(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyServiceDoubleField_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_registerClient(const ::std::string& iceP_userToken, const ::EventModule::ClientInfo& iceP_clientInfo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_EventModule_EventInterface_registerClient_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_registerClient_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_registerClient_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_clientInfo);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_registerClient_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::EventModule::EventInterface::end_registerClient(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_EventModule_EventInterface_registerClient_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_modifyClient(const ::std::string& iceP_userToken, const ::EventModule::ClientInfo& iceP_clientInfo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_modifyClient_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_modifyClient_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_clientInfo);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_modifyClient_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_modifyClient(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_modifyClient_name);
}

::Ice::AsyncResultPtr
IceProxy::EventModule::EventInterface::_iceI_begin_deleteRecord(const ::std::string& iceP_userToken, ::EventModule::Table iceP_table, ::Ice::Int iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_EventModule_EventInterface_deleteRecord_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_EventModule_EventInterface_deleteRecord_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        ostr->write(iceP_table);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_EventModule_EventInterface_deleteRecord_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::EventModule::EventInterface::end_deleteRecord(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_EventModule_EventInterface_deleteRecord_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::EventModule::EventInterface::_newInstance() const
{
    return new EventInterface;
}
/// \endcond

const ::std::string&
IceProxy::EventModule::EventInterface::ice_staticId()
{
    return ::EventModule::EventInterface::ice_staticId();
}

EventModule::EventInterface::~EventInterface()
{
}

/// \cond INTERNAL
::Ice::Object* EventModule::upCast(EventInterface* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_EventModule_EventInterface_ids[2] =
{
    "::EventModule::EventInterface",
    "::Ice::Object"
};

}

bool
EventModule::EventInterface::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_EventModule_EventInterface_ids, iceC_EventModule_EventInterface_ids + 2, s);
}

::std::vector< ::std::string>
EventModule::EventInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_EventModule_EventInterface_ids[0], &iceC_EventModule_EventInterface_ids[2]);
}

const ::std::string&
EventModule::EventInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
EventModule::EventInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::EventModule::EventInterface";
    return typeId;
#else
    return iceC_EventModule_EventInterface_ids[0];
#endif
}

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getEventsData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    istr->read(iceP_userToken);
    inS.endReadParams();
    SeqEventData ret = this->getEventsData(iceP_userToken, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getClientsByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_partialName;
    istr->read(iceP_userToken);
    istr->read(iceP_partialName);
    inS.endReadParams();
    SeqClientInfo ret = this->getClientsByName(iceP_userToken, iceP_partialName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getClientsByPhone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_partialPhone;
    istr->read(iceP_userToken);
    istr->read(iceP_partialPhone);
    inS.endReadParams();
    SeqClientInfo ret = this->getClientsByPhone(iceP_userToken, iceP_partialPhone, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getEventData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_eventId;
    istr->read(iceP_userToken);
    istr->read(iceP_eventId);
    inS.endReadParams();
    EventData ret = this->getEventData(iceP_userToken, iceP_eventId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_getTenEvents(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::std::string iceP_fromDate;
    ::Ice::Int iceP_offset;
    istr->read(iceP_userToken);
    istr->read(iceP_fromDate);
    istr->read(iceP_offset);
    inS.endReadParams();
    SeqEventData ret = this->getTenEvents(iceP_userToken, iceP_fromDate, iceP_offset, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_registerEvent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    EventData iceP_eventData;
    istr->read(iceP_userToken);
    istr->read(iceP_eventData);
    inS.endReadParams();
    EventData ret = this->registerEvent(iceP_userToken, iceP_eventData, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventIntField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_eventId;
    EventField iceP_field;
    ::Ice::Int iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_eventId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyEventIntField(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventStringField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_eventId;
    EventField iceP_field;
    ::std::string iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_eventId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyEventStringField(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyEventDoubleField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_eventId;
    EventField iceP_field;
    ::Ice::Double iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_eventId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyEventDoubleField(iceP_userToken, iceP_eventId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_addServiceToEvent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ServiceInfo iceP_serviceInfo;
    istr->read(iceP_userToken);
    istr->read(iceP_serviceInfo);
    inS.endReadParams();
    this->addServiceToEvent(iceP_userToken, iceP_serviceInfo, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceIntField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_serviceId;
    ServiceField iceP_field;
    ::Ice::Int iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_serviceId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyServiceIntField(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceStringField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_serviceId;
    ServiceField iceP_field;
    ::std::string iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_serviceId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyServiceStringField(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyServiceDoubleField(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ::Ice::Int iceP_serviceId;
    ServiceField iceP_field;
    ::Ice::Double iceP_newValue;
    istr->read(iceP_userToken);
    istr->read(iceP_serviceId);
    istr->read(iceP_field);
    istr->read(iceP_newValue);
    inS.endReadParams();
    this->modifyServiceDoubleField(iceP_userToken, iceP_serviceId, iceP_field, iceP_newValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_registerClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ClientInfo iceP_clientInfo;
    istr->read(iceP_userToken);
    istr->read(iceP_clientInfo);
    inS.endReadParams();
    ::Ice::Int ret = this->registerClient(iceP_userToken, iceP_clientInfo, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_modifyClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    ClientInfo iceP_clientInfo;
    istr->read(iceP_userToken);
    istr->read(iceP_clientInfo);
    inS.endReadParams();
    this->modifyClient(iceP_userToken, iceP_clientInfo, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceD_deleteRecord(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userToken;
    Table iceP_table;
    ::Ice::Int iceP_id;
    istr->read(iceP_userToken);
    istr->read(iceP_table);
    istr->read(iceP_id);
    inS.endReadParams();
    this->deleteRecord(iceP_userToken, iceP_table, iceP_id, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_EventModule_EventInterface_all[] =
{
    "addServiceToEvent",
    "deleteRecord",
    "getClientsByName",
    "getClientsByPhone",
    "getEventData",
    "getEventsData",
    "getTenEvents",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "modifyClient",
    "modifyEventDoubleField",
    "modifyEventIntField",
    "modifyEventStringField",
    "modifyServiceDoubleField",
    "modifyServiceIntField",
    "modifyServiceStringField",
    "registerClient",
    "registerEvent"
};

}

/// \cond INTERNAL
bool
EventModule::EventInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_EventModule_EventInterface_all, iceC_EventModule_EventInterface_all + 20, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_EventModule_EventInterface_all)
    {
        case 0:
        {
            return _iceD_addServiceToEvent(in, current);
        }
        case 1:
        {
            return _iceD_deleteRecord(in, current);
        }
        case 2:
        {
            return _iceD_getClientsByName(in, current);
        }
        case 3:
        {
            return _iceD_getClientsByPhone(in, current);
        }
        case 4:
        {
            return _iceD_getEventData(in, current);
        }
        case 5:
        {
            return _iceD_getEventsData(in, current);
        }
        case 6:
        {
            return _iceD_getTenEvents(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_modifyClient(in, current);
        }
        case 12:
        {
            return _iceD_modifyEventDoubleField(in, current);
        }
        case 13:
        {
            return _iceD_modifyEventIntField(in, current);
        }
        case 14:
        {
            return _iceD_modifyEventStringField(in, current);
        }
        case 15:
        {
            return _iceD_modifyServiceDoubleField(in, current);
        }
        case 16:
        {
            return _iceD_modifyServiceIntField(in, current);
        }
        case 17:
        {
            return _iceD_modifyServiceStringField(in, current);
        }
        case 18:
        {
            return _iceD_registerClient(in, current);
        }
        case 19:
        {
            return _iceD_registerEvent(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
EventModule::EventInterface::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< EventInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
EventModule::EventInterface::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EventInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
EventModule::_icePatchObjectPtr(EventInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = EventInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(EventInterface::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
